{"version":3,"sources":["js/03-promises.js"],"names":["formRef","document","querySelector","onFormSubmit","event","preventDefault","position","FormData","currentTarget","forEach","value","name","parseInt","callPromise","createPromise","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","step","amount","then","console","log","catch","addEventListener"],"mappings":";AAAA,MAAMA,EAAUC,SAASC,cAAc,SAIvC,SAASC,EAAaC,GACpBA,EAAMC,iBAEAC,MAAAA,EAAW,CACfA,SAAU,GAEK,IAAIC,SAASH,EAAMI,eAE3BC,QAAQ,CAACC,EAAOC,KACvBL,EAASK,GAAQC,SAASF,KAI5BG,EAAYP,GAGd,SAASQ,GAAc,SAACR,EAAD,MAAWS,IAC1BC,MAAAA,EAAgBC,KAAKC,SAAW,GAC/B,OAAA,IAAIC,QAAQ,CAACC,EAASC,KAC3BC,WAAW,KACLN,EAEFI,EAAQ,CAACd,SAAUA,EAAUS,MAAOA,IAGpCM,EAAO,CAACf,SAAUA,EAAUS,MAAOA,KAEpCA,KAIP,SAASF,GAAY,MAAEE,EAAF,KAASQ,EAAT,OAAeC,IAC7B,IAAA,IAAIlB,EAAW,EAAGA,GAAYkB,EAAQlB,GAAY,EACrDQ,EAAc,CAACR,SAAAA,EAAUS,MAAAA,IAAQU,KAAK,EAAGnB,SAAAA,EAAUS,MAAAA,MACjDW,QAAQC,2BAA2BrB,QAAeS,SACjDa,MAAM,EAAGtB,SAAAA,EAAUS,MAAAA,MACtBW,QAAQC,0BAA0BrB,QAAeS,SAEjDA,GAASQ,EAxCbvB,EAAQ6B,iBAAiB,SAAU1B","file":"03-promises.3e67fcd6.js","sourceRoot":"../src","sourcesContent":["const formRef = document.querySelector('.form');\n\nformRef.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  // console.log(typeof event);\n  const position = {\n    position: 1,\n  };\n  const formData = new FormData(event.currentTarget);\n  // console.log(formData);\n  formData.forEach((value, name) => {\n    position[name] = parseInt(value);\n  });\n  // console.log(formData);\n\n  callPromise(position);\n}\n\nfunction createPromise({position, delay}) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({position: position, delay: delay});\n      } else {\n        // Reject\n        reject({position: position, delay: delay});\n      }\n    }, delay);\n  })\n}\n\nfunction callPromise({ delay, step, amount }) {\n  for (let position = 1; position <= amount; position += 1) {\n    createPromise({position, delay}).then(({ position, delay }) => {\n      console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    }).catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n    delay += step;\n  }\n}\n\n\n\n"]}